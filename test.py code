# colab 환경에서 작동하게끔 설계한 것입니다
# 모델 적용 및 구현 내용 파악을 위한 테스트용 코드입니다
# 직접 요약은 제대로 작동하지 않습니다

# 필요 패키지들입니다
# pip install torch requests ipywidgets transformers sentencepiece

import requests
from urllib.parse import quote

import torch
from transformers import AutoModelForSeq2SeqLM, AutoTokenizer

import ipywidgets as widgets
from IPython.display import display, clear_output

import itertools
import random

# 모델 로드
hf_token = "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"  # 개인 Hugging Face token
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model_name = "wisenut/KoT5-base"
tokenizer = AutoTokenizer.from_pretrained("wisenut-nlp-team/KoT5-base", token=hf_token)
model = AutoModelForSeq2SeqLM.from_pretrained("wisenut-nlp-team/KoT5-base", token=hf_token)

# 요약 함수 정의
"""def generate_summary(input_text, model, tokenizer, max_new_tokens, num_lines):
    sentences = input_text.split("\n")
    num_sentences = len(sentences)
    summary_parts = []

    for i in range(0, num_sentences, max_new_tokens):
        part = " ".join(sentences[i : i + max_new_tokens])
        # 자연어 프롬프트에 줄 수 명시
        prefix = f"summarize: 다음 문서를 {num_lines}줄로 요약해줘. " + part
        token = tokenizer.encode(prefix, return_tensors="pt", max_length=512, truncation=True)
        token = token.to(device)
        output = model.generate(input_ids=token, max_new_tokens=max_new_tokens, num_return_sequences=1)
        summary_part = tokenizer.decode(output[0], skip_special_tokens=True)
        summary_parts.append(summary_part)

    # 작은 문장들의 요약을 합쳐서 전체 문장의 요약 생성
    full_summary = " ".join(summary_parts)
    return full_summary"""

# 요약 함수 정의
def generate_summary(input_text, model, tokenizer, max_new_tokens):
    inputs = tokenizer.encode(input_text, return_tensors="pt", max_length=512, truncation=True).to(device)
    summary_ids = model.generate(inputs, max_new_tokens=max_new_tokens, num_return_sequences=1)
    summary = tokenizer.decode(summary_ids[0], skip_special_tokens=True)
    return summary

# 네이버 api 키 및 추천 책
client_id = 'crmFhpIDo84nKGVPAFnp'
client_secret = 'IbfZJb0j1v'
display_count = 5  # 검색어당 가져올 책 수

# 책 추천 함수
def fetch_books(query, display=5):
    start = random.randint(1, 50)  # 검색 시작 위치를 1~50 사이로 랜덤 설정 (API 제한은 1000건, 한 페이지 10건)
    url = f"https://openapi.naver.com/v1/search/book.json?query={quote(query)}&display={display}&start={start}"
    headers = {
        "X-Naver-Client-Id": client_id,
        "X-Naver-Client-Secret": client_secret
    }
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json().get("items", [])
    else:
        print(f"❌ API 호출 실패({response.status_code}): {query}")
        return []

# 책 추천 정보 출력 함수
def show_recommendations(queries, display=3):
    with output_area:
        clear_output()
        for query in queries:
            print(f"\n🔍 검색어: '{query}'")
            books = fetch_books(query, display)
            if books:
                for i, book in enumerate(books):
                    print(f"\n📘 {i+1}. 제목: {book['title']}")
                    print(f"✍️ 저자: {book['author']}")
                    print(f"🏢 출판사: {book['publisher']}")
                    print(f"📄 설명: {book['description'][:150]}...")
            else:
                print("⚠️ 검색 결과가 없습니다.")

# 네이버 api를 적용해 책 정보를 검색 및 요하는 함수
def search_and_summarize_book(book_title, max_tokens):
    url = f"https://openapi.naver.com/v1/search/book.json?query={quote(book_title)}"
    headers = {
        "X-Naver-Client-Id": client_id,
        "X-Naver-Client-Secret": client_secret
    }

    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        items = response.json().get('items')
        if items:
            book = items[0]
            title = book['title']
            author = book['author']
            publisher = book['publisher']
            description = book['description']
            summary = generate_summary(description, model, tokenizer, max_tokens)

            return {
                "title": title,
                "author": author,
                "publisher": publisher,
                "description": description,
                "summary": summary
            }
        else:
            return {"error": "검색 결과가 없습니다."}
    else:
        return {"error": f"API 호출 실패: {response.status_code}"}

# 🔹 최상위 컨테이너 생성
container = widgets.VBox()

# UI 구성
query_input = widgets.Text(
    value='소설, 과학',
    placeholder='예: 소설, 과학',
    description='추천 키워드:',
    layout=widgets.Layout(width="70%")
)
recommend_button = widgets.Button(
    description='책 추천',
    button_style='success'
)

book_title_input = widgets.Text(
    value='',
    placeholder='예: 데미안',
    description='책 제목:',
    layout=widgets.Layout(width="50%")
)

line_count_slider = widgets.IntSlider(
    value=3,
    min=1,
    max=10,
    step=1,
    description='요약 길이:',
    continuous_update=False
)

search_button = widgets.Button(
    description='책 요약 생성',
    button_style='info'
)

mode_selector = widgets.ToggleButtons(
    options=['📚 책 추천 받기', '🔍 책 직접 요약'],
    description='모드 선택:',
    style={'button_color': '#ececec'}
)

output_area = widgets.Output()

# 🔧 모드 전환 UI 갱신 함수
def update_mode_ui(change):
    output_area.clear_output()
    if change['new'] == '📚 책 추천 받기':
        container.children = [mode_selector, query_input, recommend_button, output_area]
    else:
        container.children = [mode_selector, book_title_input, line_count_slider, search_button, output_area]

# 이벤트 핸들러
def on_recommend_clicked(b):
    with output_area:
        clear_output()  # 🔄 기존 출력 삭제
        queries = [q.strip() for q in query_input.value.split(',') if q.strip()]
        if queries:
            show_recommendations(queries)
        else:
            print("⚠️ 최소 1개의 키워드를 입력해주세요.")

# 버튼 이벤트
def on_search_clicked(b):
    with output_area:
        clear_output()
        title = book_title_input.value.strip()
        num_lines = line_count_slider.value
        max_tokens = num_lines * 25
        if title:
            print("🔍 책 정보 검색 및 요약 중입니다...\n")
            result = search_and_summarize_book(title, max_tokens)
            clear_output()
            if "error" in result:
                print("⚠️", result["error"])
            else:
                print(f"📚 제목: {result['title']}")
                print(f"✍️ 저자: {result['author']}")
                print(f"🏢 출판사: {result['publisher']}\n")
                print(f"📄 원문 설명:\n{result['description']}\n")
                print("📌 요약 결과:\n")
                print(result['summary'])
        else:
            print("⚠️ 책 제목을 입력해주세요.")

recommend_button.on_click(on_recommend_clicked)
search_button.on_click(on_search_clicked)
mode_selector.observe(update_mode_ui, names='value')

# 🔽 초기 UI 설정
container.children = [mode_selector, query_input, recommend_button, output_area]
display(container)
